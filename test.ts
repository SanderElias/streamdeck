import { exec } from 'child_process';
import { openStreamDeck } from 'elgato-stream-deck';
import open from 'open';
import { resolve } from 'path';
import { installCommand, cmdList } from './installCommand';
import { write } from 'clipboardy';
// import * as i3 from 'node-i3';
const i3 = require('i3').createClient();
// const i3 = I3
export const myStreamDeck = openStreamDeck();

myStreamDeck.clearAllKeys();

installCommand(0, resolve(__dirname, './assets', 'flameshot.png'), () => {
  exec('flameshot gui').unref();
});

installCommand(1, resolve(__dirname, './assets', 'Octocat.png'), () => {
  i3.tree((_err: any, r: I3Tree) => {
    // r.nodes.forEach(node => console.log(node.name))
    const logNodes = (node: any) => {
      console.log(node.name, node.WindowProperties);
      node.nodes.forEach(logNodes);
    };
    logNodes(r);
  });
});
installCommand(7, resolve(__dirname, './assets', 'Octocat.png'), () => {
  open('https://github.com/scullyio/scully/pulls');
});
installCommand(6, resolve(__dirname, './assets', 'gmail.png'), () => {
  open('https://gmail.com');
});
installCommand(14, resolve(__dirname, './assets', 'refresh.png'), () => {
  setTimeout(() => {
    exec('ts-node test').unref();
    process.exit(0);
  }, 10);
});
installCommand(13, resolve(__dirname, './assets', 'exit.png'), () => {
  setTimeout(() => {
    // exec('ts-node test').unref();?
    myStreamDeck.clearAllKeys();
    myStreamDeck.close();
    process.exit(0);
  }, 10);
});

installCommand(4, resolve(__dirname, './assets', 'left.png'), () => {
  i3.command('move workspace to output left', (...args: any) => console.log(args));
});

myStreamDeck.on('up', keyIndex => {
  console.log('key %d up', keyIndex);
  const active = cmdList.get(keyIndex);
  if (active) {
    active.action();
  }
});

// Fired whenever an error is detected by the `node-hid` library.
// Always add a listener for this event! If you don't, errors will be silently dropped.
myStreamDeck.on('error', (error: any) => {
  console.error(error);
});

// Generated by https://quicktype.io

export interface TentacledNode {
  id: number;
  type: string;
  orientation: string;
  scratchpad_state: string;
  percent: number;
  urgent: boolean;
  focused: boolean;
  output: string;
  layout: string;
  workspace_layout: string;
  last_split_layout: string;
  border: string;
  current_border_width: number;
  rect: DecoRect;
  deco_rect: DecoRect;
  window_rect: DecoRect;
  geometry: DecoRect;
  name: null | string;
  window: number | null;
  window_properties?: WindowProperties;
  nodes: I3Tree[];
  floating_nodes: any[];
  focus: number[];
  fullscreen_mode: number;
  sticky: boolean;
  floating: string;
  swallows: any[];
}

export interface FluffyNode {
  id: number;
  type: string;
  orientation: string;
  scratchpad_state: string;
  percent: number | null;
  urgent: boolean;
  focused: boolean;
  output: string;
  layout: string;
  workspace_layout: string;
  last_split_layout: string;
  border: string;
  current_border_width: number;
  rect: DecoRect;
  deco_rect: DecoRect;
  window_rect: DecoRect;
  geometry: DecoRect;
  name: string;
  num?: number;
  gaps?: Gaps;
  window: number | null;
  nodes: TentacledNode[];
  floating_nodes: any[];
  focus: number[];
  fullscreen_mode: number;
  sticky: boolean;
  floating: string;
  swallows: any[];
  window_properties?: WindowProperties;
}

export interface PurpleNode {
  id: number;
  type: string;
  orientation: string;
  scratchpad_state: string;
  percent: null;
  urgent: boolean;
  focused: boolean;
  output: string;
  layout: string;
  workspace_layout: string;
  last_split_layout: string;
  border: string;
  current_border_width: number;
  rect: DecoRect;
  deco_rect: DecoRect;
  window_rect: DecoRect;
  geometry: DecoRect;
  name: string;
  window: null;
  nodes: FluffyNode[];
  floating_nodes: any[];
  focus: number[];
  fullscreen_mode: number;
  sticky: boolean;
  floating: string;
  swallows: Swallow[];
}

export interface I3TreeNode {
  id: number;
  type: string;
  orientation: string;
  scratchpad_state: string;
  percent: number;
  urgent: boolean;
  focused: boolean;
  layout: string;
  workspace_layout: string;
  last_split_layout: string;
  border: string;
  current_border_width: number;
  rect: DecoRect;
  deco_rect: DecoRect;
  window_rect: DecoRect;
  geometry: DecoRect;
  name: string;
  window: null;
  nodes: PurpleNode[];
  floating_nodes: any[];
  focus: number[];
  fullscreen_mode: number;
  sticky: boolean;
  floating: string;
  swallows: any[];
}

export interface I3Tree {
  id: number;
  type: string;
  orientation: string;
  scratchpad_state: string;
  percent: number | null;
  urgent: boolean;
  focused: boolean;
  layout: string;
  workspace_layout: string;
  last_split_layout: string;
  border: string;
  current_border_width: number;
  rect: DecoRect;
  deco_rect: DecoRect;
  window_rect: DecoRect;
  geometry: DecoRect;
  name: string;
  window: number | null;
  nodes: I3TreeNode[];
  floating_nodes: any[];
  focus: number[];
  fullscreen_mode: number;
  sticky: boolean;
  floating: string;
  swallows: any[];
  output?: string;
  window_properties?: WindowProperties;
}

export interface DecoRect {
  x: number;
  y: number;
  width: number;
  height: number;
}

export interface WindowProperties {
  class: string;
  instance: string;
  window_role?: string;
  title: string;
  transient_for: null;
}

export interface Gaps {
  inner: number;
  outer: number;
  top: number;
  right: number;
  bottom: number;
  left: number;
}

export interface Swallow {
  dock: number;
  insert_where: number;
}
